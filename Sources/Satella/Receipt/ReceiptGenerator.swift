import UIKit

struct ReceiptGenerator {
    // MARK: Internal
    
    static func old(
        for productID: String?
    ) -> OldReceipt {
        let bundleID: String = Bundle.main.bundleIdentifier ?? "emt.paisseon.satella"
        let now: Int64 = .init(Date().timeIntervalSince1970) * 1000
        let nowDate: String = "\(Date()) Europe/Copenhagen"
        let receiptID: Int = .random(in: 1 ... 0x07151129)
        let vendorID: String = UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString
        let version: String = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "1.0"
        
        let info: OldReceiptInfo = .init(
            appItemID: receiptID.description,
            bundleID: bundleID,
            bundleVersion: version,
            externalVersion: version,
            itemID: receiptID.description,
            originalPurchaseDate: nowDate,
            originalPurchaseDateMs: now.description,
            originalPurchaseDatePst: nowDate,
            originalTransactionID: receiptID.description,
            productID: productID ?? "emt.paisseon.satella.product",
            purchaseDate: nowDate,
            purchaseDateMs: now.description,
            purchaseDatePst: nowDate,
            quantity: "1",
            transactionID: receiptID.description,
            uniqueID: receiptID.description,
            uniqueVendorID: vendorID
        )
        
        return .init(signature: Data(signature).base64EncodedString(), purchaseInfo: info, pod: "44", signingStatus: "0")
    }
    
    static func new(
        for productID: String?
    ) -> Receipt {
        let bundleID: String = Bundle.main.bundleIdentifier ?? "emt.paisseon.satella"
        let now: Int64 = .init(Date().timeIntervalSince1970) * 1000
        let nowDate: String = "\(Date()) Europe/Copenhagen"
        let receiptID: Int64 = .random(in: 1 ... 0x07151129)
        let version: String = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "1.0"
        let expDate: String = "\(Date(timeIntervalSince1970: 0xf2a52380)) Europe/Copenhagen"
        let expNow: Int64 = 0xf2a52380 * 1000
        
        let info: ReceiptInfo = .init(
            quantity: "1",
            productID: productID ?? bundleID,
            transactionID: receiptID.description,
            originalTransactionID: receiptID.description,
            purchaseDate: nowDate,
            purchaseDateMs: now.description,
            purchaseDatePst: nowDate,
            originalPurchaseDate: nowDate,
            originalPurchaseDateMs: nowDate,
            originalPurchaseDatePst: nowDate,
            expiresDate: expDate,
            expiresDateMs: expNow.description,
            expiresDatePst: expDate,
            isTrialPeriod: "false",
            isInIntroOfferPeriod: "false"
        )
        
        let receipt: Receipt = .init(
            receiptType: "Production",
            adamID: receiptID,
            appItemID: receiptID,
            bundleID: bundleID,
            applicationVersion: version,
            downloadID: Int(receiptID),
            versionExternalIDentifier: 0,
            receiptCreationDate: nowDate,
            receiptCreationDateMs: now.description,
            receiptCreationDatePst: nowDate,
            requestDate: nowDate,
            requestDateMs: now.description,
            requestDatePst: nowDate,
            originalPurchaseDate: nowDate,
            originalPurchaseDateMs: now.description,
            originalPurchaseDatePst: nowDate,
            originalApplicationVersion: version,
            inApp: [info]
        )
        
        return receipt
    }
    
    static func response() -> Data? {
        let receipt: Receipt = new(for: ReceiptStorage.shared.currentProductID)
        let encoder: JSONEncoder = .init()
        var base64: String = ""
        let productID: String = ReceiptStorage.shared.currentProductID
        
        do {
            let receiptData: Data = try encoder.encode(receipt)
            base64 = receiptData.base64EncodedString()
        } catch {
            return nil
        }
        
        let renewal: RenewalInfo = .init(
            autoRenewProductID: productID,
            originalTransactionID: UUID().uuidString,
            productID: productID,
            autoRenewStatus: "1"
        )
        
        let response: ReceiptResponse = .init(
            status: 0,
            environment: "Production",
            receipt: receipt,
            latestReceiptInfo: receipt.inApp,
            lastReceipt: base64,
            pendingRenewalInfo: [renewal]
        )
        
        do {
            let responseData: Data = try encoder.encode(response)
            return responseData
        } catch {
            return nil
        }
    }

    // MARK: Private

    private static let signature: [UInt8] = [0x03, 0x42, 0xfb, 0x17, 0x13, 0xce, 0x78, 0xfd, 0x08, 0x3d, 0xa8, 0x30, 0x13, 0xe0, 0xae, 0xc6, 0x6d, 0x4c, 0xa5, 0x57, 0xfc, 0x32, 0x34, 0xed, 0xa3, 0xee, 0xc5, 0x0d, 0xb4, 0xcd, 0x03, 0xd1, 0xf1, 0x39, 0x25, 0x54, 0xf9, 0x7c, 0xd0, 0x42, 0x4a, 0x6e, 0xab, 0x04, 0xc8, 0x0b, 0xdb, 0x1d, 0x24, 0xb0, 0x9a, 0xbc, 0xac, 0x33, 0x3e, 0x37, 0xd8, 0x23, 0xff, 0x1f, 0x58, 0x46, 0xd1, 0x7d, 0x66, 0xd3, 0x3c, 0x63, 0xf3, 0x1d, 0xd5, 0x4c, 0xb6, 0xee, 0x6b, 0x5d, 0x9f, 0x0e, 0x20, 0x9b, 0x10, 0xfb, 0xfa, 0xc7, 0x90, 0xb1, 0x98, 0x38, 0xec, 0x37, 0xbe, 0x37, 0x2f, 0x8f, 0xb5, 0x4c, 0x9c, 0x55, 0x4d, 0x09, 0xe6, 0x85, 0x8d, 0xcf, 0xbf, 0x53, 0x27, 0x4f, 0x5b, 0x6a, 0xa6, 0x22, 0xaf, 0x2b, 0x81, 0x1a, 0x3e, 0xe7, 0xf1, 0xdd, 0x7d, 0x82, 0xd7, 0x49, 0x9f, 0xf6, 0xc1, 0x27, 0xaa, 0xc5, 0xe1, 0x53, 0xc5, 0x84, 0x63, 0x0f, 0xcb, 0x6b, 0x1a, 0x4d, 0xbd, 0x8e, 0x3f, 0x43, 0xa6, 0x38, 0xbb, 0xd1, 0xce, 0x90, 0xa8, 0x14, 0x06, 0x84, 0xe8, 0x04, 0xa7, 0x01, 0xbd, 0x68, 0x96, 0xc8, 0xb9, 0xa1, 0xaf, 0xa7, 0xdf, 0x6a, 0xe4, 0x3f, 0x55, 0x07, 0xd4, 0xc8, 0x65, 0x4d, 0xda, 0x1d, 0x2a, 0x4c, 0x92, 0x2d, 0x39, 0x1a, 0x3e, 0x85, 0x03, 0x36, 0x0d, 0xd2, 0x8d, 0x41, 0x75, 0xd5, 0xae, 0x3c, 0x6c, 0xb0, 0xc1, 0x6f, 0xad, 0xac, 0x08, 0xe1, 0xad, 0x95, 0xde, 0x01, 0x12, 0x6c, 0x4a, 0x9e, 0xcb, 0x48, 0xed, 0x4a, 0x11, 0xe7, 0x28, 0xdc, 0x06, 0xcd, 0x37, 0x03, 0x2f, 0xb4, 0xd2, 0x7f, 0x8c, 0xac, 0x29, 0xff, 0x64, 0xae, 0x45, 0x81, 0xff, 0x9a, 0x6b, 0x4e, 0xc9, 0xdd, 0x6e, 0xa3, 0x8a, 0x90, 0x04, 0xf5, 0x17, 0x84, 0x8c, 0x14, 0x46, 0x99, 0xa0, 0x18, 0x24, 0x00, 0x00, 0x05, 0x80, 0x30, 0x82, 0x05, 0x7c, 0x30, 0x82, 0x04, 0x64, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x0e, 0xeb, 0x57, 0x87, 0xe7, 0x9e, 0x09, 0x8d, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x81, 0x96, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x23, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x44, 0x30, 0x42, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x3b, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x35, 0x31, 0x31, 0x31, 0x33, 0x30, 0x32, 0x31, 0x35, 0x30, 0x39, 0x5a, 0x17, 0x0d, 0x32, 0x33, 0x30, 0x32, 0x30, 0x37, 0x32, 0x31, 0x34, 0x38, 0x34, 0x37, 0x5a, 0x30, 0x81, 0x89, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x2e, 0x4d, 0x61, 0x63, 0x20, 0x41, 0x70, 0x70, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x31, 0x2c, 0x30, 0x2a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x23, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xa5, 0xcf, 0x81, 0xfd, 0x25, 0xa2, 0x81, 0x5b, 0xd6, 0x87, 0xed, 0x23, 0xda, 0x33, 0x1c, 0x8e, 0xe2, 0x23, 0xc0, 0xa5, 0xc4, 0x26, 0xcb, 0x3d, 0xc6, 0x9f, 0xec, 0x4a, 0x0d, 0x55, 0x86, 0xff, 0xa4, 0x02, 0xd7, 0x97, 0xca, 0x39, 0x54, 0x6d, 0x7d, 0x7f, 0xb2, 0x54, 0x18, 0x9d, 0xc4, 0x2c, 0x52, 0x71, 0x8e, 0x64, 0x7b, 0x82, 0xce, 0x89, 0xba, 0x49, 0xd6, 0x08, 0xe5, 0xb4, 0x88, 0x71, 0xcf, 0x3f, 0x5b, 0x46, 0x2e, 0xc6, 0xc4, 0x1d, 0xb8, 0x03, 0xa9, 0x58, 0xa2, 0x04, 0x3e, 0x21, 0x78, 0xd5, 0xdb, 0xb7, 0xd0, 0x8e, 0x12, 0x8d, 0x83, 0x4c, 0x5b, 0x2a, 0x68, 0x37, 0x93, 0xc2, 0xf2, 0xbd, 0x1e, 0xc4, 0xd2, 0xa1, 0x0c, 0x4a, 0x58, 0x52, 0xab, 0x12, 0xe3, 0xed, 0xdd, 0x1f, 0x98, 0x15, 0x90, 0x35, 0x2d, 0xc2, 0xcc, 0x12, 0xca, 0x8d, 0x48, 0x81, 0xf7, 0x58, 0x78, 0x54, 0x6b, 0xe8, 0x8c, 0x31, 0x36, 0x1f, 0x4a, 0x06, 0x0c, 0x47, 0x54, 0xf3, 0x37, 0x90, 0xb8, 0xb2, 0x92, 0x89, 0x7d, 0x5f, 0xa4, 0x85, 0x4a, 0xe1, 0xc0, 0x9c, 0xe0, 0xba, 0xa4, 0xbb, 0x82, 0x97, 0x63, 0xf4, 0x2b, 0x93, 0xc1, 0xfd, 0x3e, 0x6f, 0xca, 0xc1, 0xf5, 0x3c, 0xa9, 0x8f, 0x52, 0x1a, 0xc0, 0x25, 0x0a, 0x76, 0x0e, 0xde, 0xfe, 0x99, 0xfe, 0xff, 0xc2, 0x6b, 0xf5, 0x5b, 0x5e, 0xac, 0x73, 0x51, 0x49, 0x08, 0x56, 0x89, 0xcc, 0x43, 0x90, 0xcc, 0x8e, 0x81, 0x02, 0xd0, 0xa0, 0x97, 0xb6, 0x5c, 0xb1, 0xa1, 0x69, 0x69, 0x87, 0x90, 0x10, 0x68, 0x26, 0x26, 0x39, 0xb8, 0x1d, 0x10, 0x73, 0xb0, 0x0a, 0x5d, 0xc5, 0x73, 0xd0, 0xdf, 0x76, 0x3b, 0xd8, 0x2d, 0xd9, 0x88, 0x1e, 0xe3, 0xec, 0x07, 0xcf, 0xe2, 0x8e, 0xd0, 0xd3, 0xfa, 0x26, 0x55, 0x81, 0xef, 0xe2, 0x03, 0x49, 0x23, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0xd7, 0x30, 0x82, 0x01, 0xd3, 0x30, 0x3f, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x33, 0x30, 0x31, 0x30, 0x2f, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x30, 0x33, 0x2d, 0x77, 0x77, 0x64, 0x72, 0x30, 0x34, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x91, 0xa4, 0x9c, 0xfc, 0xc4, 0x76, 0xb7, 0x9f, 0xa0, 0x8a, 0xf4, 0x4d, 0xf5, 0x8f, 0x36, 0x5d, 0xed, 0x2b, 0x04, 0x85, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x88, 0x27, 0x17, 0x09, 0xa9, 0xb6, 0x18, 0x60, 0x8b, 0xec, 0xeb, 0xba, 0xf6, 0x47, 0x59, 0xc5, 0x52, 0x54, 0xa3, 0xb7, 0x30, 0x82, 0x01, 0x1e, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x04, 0x82, 0x01, 0x15, 0x30, 0x82, 0x01, 0x11, 0x30, 0x82, 0x01, 0x0d, 0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x05, 0x06, 0x01, 0x30, 0x81, 0xfe, 0x30, 0x81, 0xc3, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x02, 0x30, 0x81, 0xb6, 0x0c, 0x81, 0xb3, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x62, 0x79, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x30, 0x36, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x10, 0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x06, 0x0b, 0x01, 0x04, 0x02, 0x05, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x0d, 0xa6, 0x1b, 0xd3, 0x2e, 0x3d, 0xe3, 0x5b, 0x2b, 0x07, 0x6e, 0x42, 0x96, 0x6c, 0xd3, 0xe8, 0x8c, 0x43, 0x30, 0x82, 0x5f, 0xe0, 0x5c, 0xd1, 0x8d, 0xbe, 0xbd, 0x0f, 0xbd, 0x1a, 0xfc, 0x25, 0x92, 0xdb, 0x8c, 0x85, 0xc3, 0x80, 0x59, 0xdf, 0xe3, 0xe2, 0xd7, 0x2e, 0x05, 0x14, 0xac, 0x0d, 0xdb, 0xb6, 0xb8, 0xfe, 0xfc, 0x35, 0x2e, 0x7c, 0xcb, 0xad, 0x17, 0x6b, 0x8e, 0x7f, 0x1f, 0xe4, 0x77, 0xb9, 0xb1, 0x67, 0x95, 0xb4, 0x13, 0x5e, 0xa6, 0x19, 0x86, 0x76, 0xf8, 0x5a, 0x20, 0x95, 0xe7, 0x63, 0x8c, 0x0f, 0x73, 0xfc, 0xe8, 0xed, 0xc6, 0x1f, 0xae, 0x99, 0xf8, 0x65, 0x48, 0x5c, 0xa0, 0xe0, 0x28, 0x3a, 0xc0, 0x10, 0x37, 0x2d, 0xb9, 0xa0, 0x04, 0x39, 0x1f, 0x73, 0xb9, 0xc8, 0x05, 0xfd, 0xf2, 0xde, 0x7f, 0x1a, 0x2a, 0x2a, 0x6e, 0x2b, 0x01, 0xfc, 0xa0, 0x20, 0x5c, 0xd9, 0xeb, 0x7d, 0x27, 0xa6, 0x33, 0xf8, 0xf5, 0x98, 0xe0, 0xbe, 0x44, 0xdb, 0xb1, 0x4c, 0x67, 0xfc, 0x6e, 0x0a, 0x4f, 0xc9, 0xe2, 0x06, 0xa8, 0xd2, 0x97, 0xf3, 0xa7, 0x8e, 0x6b, 0x51, 0xa2, 0x5a, 0x84, 0x75, 0x65, 0xd1, 0x16, 0x04, 0x62, 0xe3, 0xc1, 0x5f, 0xf5, 0x08, 0xa9, 0xcf, 0x68, 0xd9, 0x92, 0x00, 0xc9, 0xc1, 0x8c, 0xb3, 0xf8, 0x8d, 0x00, 0x64, 0xba, 0x58, 0x60, 0xc0, 0x7c, 0xaf, 0x8f, 0x75, 0xca, 0x69, 0xb9, 0x5b, 0x2a, 0xd6, 0x1d, 0x68, 0x6e, 0x98, 0x42, 0xf5, 0x4c, 0xa7, 0x37, 0x19, 0x9b, 0xcc, 0x3b, 0x1c, 0x7a, 0x19, 0x43, 0xf3, 0xa3, 0x6d, 0xbf, 0x48, 0x60, 0x06, 0x0c, 0x36, 0x92, 0x2b, 0xec, 0xde, 0x18, 0xb5, 0x11, 0xda, 0x2d, 0x23, 0xd0, 0x8e, 0xfc, 0xa0, 0x69, 0x9c, 0x17, 0x1b, 0x9e, 0x80, 0x7b, 0x39, 0x47, 0x45, 0x30, 0x61, 0x2f, 0xc7]
}
